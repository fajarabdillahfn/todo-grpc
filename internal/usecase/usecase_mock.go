// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/fajarabdillahfn/todo-grpc/internal/model"
	"sync"
)

// Ensure, that TaskUseCaseMock does implement TaskUseCase.
// If this is not the case, regenerate this file with moq.
var _ TaskUseCase = &TaskUseCaseMock{}

// TaskUseCaseMock is a mock implementation of TaskUseCase.
//
//	func TestSomethingThatUsesTaskUseCase(t *testing.T) {
//
//		// make and configure a mocked TaskUseCase
//		mockedTaskUseCase := &TaskUseCaseMock{
//			CreateFunc: func(ctx context.Context, task *model.Task) (uint, error) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id uint) error {
//				panic("mock out the Delete method")
//			},
//			GetAllFunc: func(ctx context.Context) (*[]model.Task, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uint) (*model.Task, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateFunc: func(ctx context.Context, task *model.TaskUpdate) (*model.Task, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedTaskUseCase in code that requires TaskUseCase
//		// and then make assertions.
//
//	}
type TaskUseCaseMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, task *model.Task) (uint, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id uint) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (*[]model.Task, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uint) (*model.Task, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, task *model.TaskUpdate) (*model.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Task is the task argument value.
			Task *model.Task
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Task is the task argument value.
			Task *model.TaskUpdate
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockGetAll  sync.RWMutex
	lockGetByID sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *TaskUseCaseMock) Create(ctx context.Context, task *model.Task) (uint, error) {
	if mock.CreateFunc == nil {
		panic("TaskUseCaseMock.CreateFunc: method is nil but TaskUseCase.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Task *model.Task
	}{
		Ctx:  ctx,
		Task: task,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, task)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedTaskUseCase.CreateCalls())
func (mock *TaskUseCaseMock) CreateCalls() []struct {
	Ctx  context.Context
	Task *model.Task
} {
	var calls []struct {
		Ctx  context.Context
		Task *model.Task
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TaskUseCaseMock) Delete(ctx context.Context, id uint) error {
	if mock.DeleteFunc == nil {
		panic("TaskUseCaseMock.DeleteFunc: method is nil but TaskUseCase.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedTaskUseCase.DeleteCalls())
func (mock *TaskUseCaseMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *TaskUseCaseMock) GetAll(ctx context.Context) (*[]model.Task, error) {
	if mock.GetAllFunc == nil {
		panic("TaskUseCaseMock.GetAllFunc: method is nil but TaskUseCase.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedTaskUseCase.GetAllCalls())
func (mock *TaskUseCaseMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *TaskUseCaseMock) GetByID(ctx context.Context, id uint) (*model.Task, error) {
	if mock.GetByIDFunc == nil {
		panic("TaskUseCaseMock.GetByIDFunc: method is nil but TaskUseCase.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedTaskUseCase.GetByIDCalls())
func (mock *TaskUseCaseMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TaskUseCaseMock) Update(ctx context.Context, task *model.TaskUpdate) (*model.Task, error) {
	if mock.UpdateFunc == nil {
		panic("TaskUseCaseMock.UpdateFunc: method is nil but TaskUseCase.Update was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Task *model.TaskUpdate
	}{
		Ctx:  ctx,
		Task: task,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, task)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedTaskUseCase.UpdateCalls())
func (mock *TaskUseCaseMock) UpdateCalls() []struct {
	Ctx  context.Context
	Task *model.TaskUpdate
} {
	var calls []struct {
		Ctx  context.Context
		Task *model.TaskUpdate
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
